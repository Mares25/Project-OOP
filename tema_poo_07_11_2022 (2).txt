#include <iostream>
#include <cstring>

using namespace std;

class BonDeMasa {
    int id{};
    char* emitent{};
    float valoare{};
public:
    BonDeMasa(){this->emitent = new char[50];};
    BonDeMasa(int id, char* emitent, float valoare){
        this->id = id;
        this->emitent = new char[50];
        strcpy(this->emitent, emitent);
        this->valoare = valoare;
    }
    ~BonDeMasa(){delete[] this->emitent;}
    friend istream& operator>>(istream& , BonDeMasa&);
    friend ostream& operator<<(ostream& , const BonDeMasa&);
    BonDeMasa& operator=(const BonDeMasa& ob);
};

istream& operator>>(istream& in, BonDeMasa& ob){

    cout<<"Dati id-ul:";
    in>> ob.id;
    cout<<"Dati emitentul:";
    in >> ob.emitent;
    cout<<"Dati valoarea:";
    in>> ob.valoare;
    return in;
}

ostream& operator<<(ostream& out, const BonDeMasa& ob){

    out << ob.id<<'\n';
    out << ob.emitent<<'\n';
    out << ob.valoare<<'\n';
    return out;
}

BonDeMasa& BonDeMasa::operator=(const BonDeMasa& ob) {
    if(this != &ob)
    {
        this->id = ob.id;
        strcpy(this->emitent, ob.emitent);
        this->valoare = ob.valoare;
    }
    return *this;
}

class Angajat {
    int id{}, nrBonuri{};
    char nume[50];
    BonDeMasa* bonuri{};
public:
    Angajat() = default;

    Angajat(int id, char nume[50]){
        this->id = id;
        strcpy(this->nume, nume);
    }

    Angajat(const Angajat& ob){

        this->id = ob.id;
        this->nrBonuri = ob.nrBonuri;
        strcpy(this->nume, ob.nume);
        this->bonuri = new BonDeMasa[nrBonuri];
        for(int i = 0; i < ob.nrBonuri; i++)
            this->bonuri[i] = ob.bonuri[i];
    }

    ~Angajat() {
        if(this->nrBonuri > 0)
            delete[] this->bonuri;
    }

    friend ostream& operator<<(ostream&, const Angajat&);
    friend istream& operator>>(istream&, Angajat&);

    Angajat& operator=(const Angajat& ob) {
        if(this != &ob) {
            this->id = ob.id;
            this->nrBonuri = ob.nrBonuri;
            strcpy(this->nume, ob.nume);
            BonDeMasa *aux = new BonDeMasa[ob.nrBonuri];
            for(int i = 0; i < ob.nrBonuri; i++)
                aux[i] = ob.bonuri[i];
            delete[] this->bonuri;
            this->bonuri = aux;
        }
        return *this;
    }

    Angajat& operator*=(BonDeMasa& ob){
        this->nrBonuri++;
        BonDeMasa *aux = new BonDeMasa[nrBonuri];
        int i;
        for(i = 0; i < nrBonuri-1; i++)
            aux[i] = this->bonuri[i];
        aux[i] = ob;
        delete[] this->bonuri;
        this->bonuri = aux;
        return *this;
    }

    bool operator<(const Angajat& ob) const {

        if(this->id < ob.id)
            return true;
        return false;

    }

    void afiseaza(){

        cout << "ID: " << this->id << endl;
        cout << "Nr bonuri: " << this->nrBonuri << endl;
        cout << "Nume: " << this->nume << endl;
        cout << "Bonuri:\n";
        for(int i = 0; i < this->nrBonuri; i++)
            cout << this->bonuri[i] << '\n';
    }
};

istream& operator>>(istream& in, Angajat& ob){
    cout << "Dati id-ul:";
    in >> ob.id;
    cout << "Dati numele:";
    in >> ob.nume;
    return in;
}


ostream& operator<<(ostream& out, const Angajat& ob)
{
    out << '\n';
    out << ob.id << '\n';
    out << ob.nume << '\n';
    for(int i = 0; i < ob.nrBonuri; i++)
        cout << ob.bonuri[i] << '\n';

    return out;
}


int main() {

    BonDeMasa b1(1,"GustoPass",9.35), b2, b3;
    b3 = b1;
    Angajat a1(22,"Ionescu"), a2;
    cout<<a1; //afisarea tuturor informatiilor despre un angajat
    cin>>b2;
    cin>>a2; //citirea tuturor informatiilor despre un angajat
    Angajat a3(a2), a4;
    a3 *= b1; //atribuie bonul de masa b1 angajatului a3 prin salvarea lui b1 in vectorul bonuri din a3
    a4 = a3;
    if (a1 < a2) cout<<"Angajatul "<<a1<<" are id-ul mai mic decat "<<a2;
    a3.afiseaza(); //afisarea tuturor informatiilor despre un angajat.

    return 0;
}